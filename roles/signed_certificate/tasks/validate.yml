---
- name: Include OS specific variables
  ansible.builtin.include_vars: "{{ _file }}"
  vars:
    _file: "{{ lookup('first_found', _params) }}"
    _params:
      files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_release | default('') }}.yml"
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family }}.yml"
        - fallback.yml
      paths:
        - "{{ role_path }}/vars"

- name: Validate OS is supported
  ansible.builtin.assert:
    that:
      - _cert_os_is_supported
    fail_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is not supported."
    success_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is from a supported OS family."

- name: Indicate OS is tested
  when:
    - _cert_os_is_tested
  ansible.builtin.debug:
    msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} has been tested with this role."

- name: Warn if OS is not tested
  when:
    - not _cert_os_is_tested
  ansible.builtin.debug:
    msg: "WARNING: {{ ansible_distribution }} {{ ansible_distribution_version }} is not tested."
  changed_when: true

- name: Validate certificate path is defined
  when:
    - cert_certificate_to_file
  ansible.builtin.assert:
    that:
      - cert_certificate_path is defined
    fail_msg: Certificate path is not defined.
    success_msg: Certificate path is defined.

- name: Validate certificate owner user exists
  when:
    - cert_certificate_to_file
    - ansible_os_family != 'Windows'
  ansible.builtin.assert:
    that:
      - cert_certificate_owner in getent_passwd.keys()
    fail_msg: "User '{{ cert_certificate_owner }}' does not exist."
    success_msg: "User '{{ cert_certificate_owner }}' exists."

- name: Validate certificate group exists
  when:
    - cert_certificate_to_file
    - ansible_os_family != 'Windows'
  ansible.builtin.assert:
    that:
      - cert_certificate_group in getent_group.keys()
    fail_msg: "Group '{{ cert_certificate_group }}' does not exist."
    success_msg: "Group '{{ cert_certificate_group }}' exists."

- name: Validate certificate is being output
  ansible.builtin.assert:
    that:
      - cert_certificate_to_file or cert_certificate_to_variable
    fail_msg: Certificate must be output to a file, to a variable, or both.
    success_msg: Certificate is being output.

- name: Clear certificate content
  ansible.builtin.set_fact:
    cert_certificate_content: ''
